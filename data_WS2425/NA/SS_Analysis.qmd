---
title: "SS_Analysis"
format: html
editor: visual
---

## Data Preparation

```{r}
#install.packages("RSiena")
```

```{r}
#library(reticulate)
#use_python("/Users/ramius/.pyenv/versions/3.12.0/bin", required = TRUE)

library(networkdata)
library(network)
library(intergraph)
library(jsonlite)
library(tidyverse)
library(statnet)

num_cores <- parallel::detectCores()
```

------------------------------------------------------------------------

```{r}
setwd("~/Desktop/CodeVault/01_Project/Work/Susumu/Student_Survey/StudentSurvey_GitDock/data_WS2425/NA")
```

```{r}
nodes_W1_json <- fromJSON("nodes_W1.json")
edges_W1_json <- fromJSON("edges_W1.json")

nodes_W2_json <- fromJSON("nodes_W2.json")
edges_W2_json <- fromJSON("edges_W2.json")

nodes_W3_json <- fromJSON("nodes_W3.json")
edges_W3_json <- fromJSON("edges_W3.json")
```

```{r}
# Function to convert JSON-like list to network graph
edge_json_to_frame <- function(json_data) {
  # Initialize an empty edge list
  edge_list <- data.frame(from = character(), to = character(), relation = character(), value = character(), stringsAsFactors = FALSE)

  # Loop through each person's connections
  for (person in names(json_data)) {
    connections <- json_data[[person]]  # Get this person's connections

    for (contact in names(connections)) {
      for (relation in names(connections[[contact]])) {
        value <- connections[[contact]][[relation]]  # Get the value (TRUE/FALSE or numeric)

        # Store everything (TRUE, FALSE, numeric) as characters
        if (!is.null(value)) {
          edge_list <- rbind(edge_list, data.frame(from = person, to = contact, relation = relation, value = as.character(value), stringsAsFactors = FALSE))
        }
      }
    }
  }

  return(edge_list)
}
```

```{r}
node_json_to_frame <- function(json_data) {
  # Get all unique attribute names
  all_attributes <- unique(unlist(lapply(json_data, names)))

  # Create an empty data frame with all attributes as columns
  node_list <- data.frame(id = names(json_data), stringsAsFactors = FALSE)

  # Add empty columns for each attribute
  for (attr in all_attributes) {
    node_list[[attr]] <- NA
  }

  # Populate the data frame
  for (person in names(json_data)) {
    attributes <- json_data[[person]]

    for (attr in names(attributes)) {
      node_list[node_list$id == person, attr] <- attributes[[attr]]
    }
  }

  return(node_list)
}
```

```{r}
df_nodes_W1 <- node_json_to_frame(nodes_W1_json)
df_nodes_W2 <- node_json_to_frame(nodes_W2_json)
df_nodes_W3 <- node_json_to_frame(nodes_W3_json)

df_edges_W1 <- edge_json_to_frame(edges_W1_json)
df_edges_W2 <- edge_json_to_frame(edges_W2_json)
df_edges_W3 <- edge_json_to_frame(edges_W3_json)
```

```{r}

df_to_net <- function(df, id_list) {
  # Initialize an empty list to store networks
  net_list <- list()
  
  df <- df[df$value != FALSE, ]
  
  # Step 2: Loop through each unique 'relation' value
  for (name in unique(df$relation)) {
    # Filter data for the current relation
    df_filtered <- df[df$relation == name, ]
    
    if (all(df_filtered$value != TRUE)) {
      edgelist <- data.frame(from = df_filtered$from, 
                             to = df_filtered$to,
                             weight = df_filtered$value)
      net <- network(x = edgelist, directed = TRUE, vertices = data.frame(id_list))
    }
    else {
      edgelist <- data.frame(from = df_filtered$from, to = df_filtered$to)
      net <- network(x = edgelist, directed = TRUE, vertices = data.frame(id_list))
    }
    
    # Store the igraph network in the list
    net_list[[name]] <- net
  }
  
  return(net_list)
}
```

```{r}
networks_W1 <- df_to_net(df_edges_W1, df_nodes_W1$id)
networks_W2 <- df_to_net(df_edges_W2, df_nodes_W2$id)
networks_W3 <- df_to_net(df_edges_W3, df_nodes_W3$id)
```

```{r}
wave_generator <- function(df_nodes, df_relations, base) {
  # Create a copy of the base network
  wave_net <- base
  
  # Loop through node attributes and set them in the network
  for (name in names(df_nodes)) {
    # Ensure you're referencing the column properly
    network::set.vertex.attribute(wave_net, name, df_nodes[[name]])
  }
  
  # Loop through relations and set them as edge attributes
  for (relation in names(df_relations)) {
    # Set edge attribute for the given relation
    network::set.network.attribute(wave_net, relation, df_relations[[relation]])
  }
  
  return(wave_net)
}
```

```{r}

# Example call to the function with df_nodes_W1 and networks_W1
W1 <- wave_generator(df_nodes_W1, networks_W1, networks_W1$friend)
W2 <- wave_generator(df_nodes_W2, networks_W2, networks_W2$friend)
W3 <- wave_generator(df_nodes_W3, networks_W3, networks_W3$friend)
```

------------------------------------------------------------------------

## ERGM

```{r}
set.seed(1012)

mod_homoph_mutual1 <- ergm(W3 ~ edges + 
                             absdiff("age") + 
                             absdiff("linksrechts_self") + 
                             absdiff("grade") +
                             #absdiff("politics_question_one") +
                             #absdiff("politics_question_two") +
                             #absdiff("politics_question_three") +
                             #absdiff("politics_question_four") +
                             #absdiff("politics_question_five") +
                             #absdiff("politics_question_six") +
                             #absdiff("politics_question_seven") +
                             #absdiff("rent") +
                             absdiff("semester_of_study") +
                             
                             nodematch("gender") +
                             nodematch("study_program") +
                             nodematch("fresherscamp_student") +
                             nodematch("freshersweek_student") +
                             #nodematch("partyvote") +
                             #nodefactor("partyvote") +
                             
                             edgecov("value") +
                             edgecov("study") +
                             edgecov("politics") +
                             
                             mutual + 
                             dgwesp(fixed = T, type = "OTP", decay = .1) +
                             dgwesp(fixed = T, type = "ITP", decay = .1),
                             #gwesp(decay = .1, fixed = T), 
                           
                            control = control.ergm(MCMC.burnin = 20000, 
                                                  MCMC.samplesize = 5000, 
                                                  parallel = 4))

summary(mod_homoph_mutual1)
```

```{r}
mcmc.diagnostics(mod_homoph_mutual1, vars.per.page = 4)

```

```{r}

gof_mod_homoph_mutual1 <- gof(mod_homoph_mutual1, 
                              GOF = ~ distance + espartners + model,
                              control = control.gof.ergm(seed = 110))

par(mfrow = c(1, 3)) 
plot(gof_mod_homoph_mutual1)
```

------------------------------------------------------------------------

### ERGM Valued

```{r}
test <- get.network.attribute(W3, "leftright")
#test <- get.network.attribute(W3, "age")
#test <- get.network.attribute(W3, "grade")

test %e% "weight" <- as.numeric(get.edge.attribute(test, "weight"))

edge_weights <- get.edge.attribute(test, "weight")
edge_weights[edge_weights == -999] <- NA

# Update the network with modified weights
test <- set.edge.attribute(test, "weight", edge_weights)

set.vertex.attribute(test, "leftright_self", get.vertex.attribute(W3, "linksrechts_self"))

set.vertex.attribute(test, "gender", get.vertex.attribute(W3, "gender"))
set.vertex.attribute(test, "grade", get.vertex.attribute(W3, "grade"))

test %v% "leftrightself" <- as.numeric(get.vertex.attribute(test, "leftrightself"))
```

```{r}
# 1. Convert network to edgelist with weights
el <- as.edgelist(test, attrname = "weight")
weights <- el[, 3]

# 2. Calculate averages PROPERLY (ignores non-edges)
if(is.directed(test)) {
  avg_outgoing <- tapply(weights, el[, 1], mean, na.rm = TRUE)
  avg_incoming <- tapply(weights, el[, 2], mean, na.rm = TRUE)
} else {
  # For undirected, treat both directions
  avg_both <- tapply(weights, c(el[, 1], el[, 2]), mean, na.rm = TRUE)
  avg_outgoing <- avg_incoming <- avg_both
}

# 3. Map results to all nodes
all_nodes <- 1:network.size(test)
avg_outgoing_full <- rep(NA, network.size(test))
avg_incoming_full <- rep(NA, network.size(test))

avg_outgoing_full[as.numeric(names(avg_outgoing))] <- avg_outgoing
avg_incoming_full[as.numeric(names(avg_incoming))] <- avg_incoming

avg_incoming_full[is.na(avg_incoming_full)] <- 0
avg_outgoing_full[is.na(avg_outgoing_full)] <- 0

# 4. Add to network
test %v% "avg_outgoing_weight" <- avg_outgoing_full
test %v% "avg_incoming_weight" <- avg_incoming_full

# 7. Final verification
cat("First 5 nodes outgoing:", head(test %v% "avg_outgoing_weight", 5), "\n")
cat("First 5 nodes incoming:", head(test %v% "avg_incoming_weight", 5), "\n")
```

```{r}
# Get node political leaning attribute
leftright_self <- get.vertex.attribute(test, "leftright_self")

# Create dyadic similarity matrix (absolute differences)
node_edge_similarity <- outer(leftright_self, leftright_self, FUN = function(x,y) abs(x - y))

# Add as network attribute
test %n% "node_edge_similarity" <- node_edge_similarity
```

```{r}

# Get attributes safely
node_lr <- get.vertex.attribute(test, "leftright_self")
edge_lr <- get.edge.attribute(test, "weight")

# Get edgelist with node indices
el <- as.edgelist(test)

# Calculate new weights (sender's perspective)
new_weights <- abs(node_lr[el[,1]] - edge_lr)

# Update network weights
test <- set.edge.attribute(test, "weight", new_weights)

# Validate conversion
cat("First 5 new weights:", head(get.edge.attribute(test, "weight"), 5), "\n")
cat("Weight summary:\n")
print(summary(get.edge.attribute(test, "weight")))

# Debugging info
cat("\nDebugging Info:\n")
cat("Network size:", network.size(test), "\n")
cat("Node attr length:", length(node_lr), "\n")
cat("Edge attr length:", length(edge_lr), "\n")
cat("Edgelist rows:", nrow(el), "\n")
```

```{r}
library(ergm.count)

# Add the matrix as a network-level dyadic covariate
test %n% "node_edge_similarity" <- node_edge_similarity

count_mod1 <- ergm(test ~ sum + 
                     mutual +
                     #transitive +
                     absdiff("leftright_self") +
                     absdiff("grade") +
                     #absdiff("avg_incoming_weight") +
                     #absdiff("avg_outgoing_weight") +
                     nodecov("leftright_self", form="sum") +
                     nodematch("leftright_self", form="sum") +
                     nodematch("gender", form="sum") +
                     #nodematch("gender", form="sum") +
                     #edgecov("node_edge_similarity") +
                     #transitiveweights("min", "max", "min") +
                     nonzero, 
                   response = "weight", 
                   reference = ~Geometric,
                   control = control.ergm(MCMC.samplesize = 10000))

summary(count_mod1)
```

```{r}

count_mod2 <- ergm(
  test ~ sum +
    edgecov("node_edge_similarity") +  # Baseline alignment
    absdiff("leftright_self") +
    nodeicov("avg_incoming_weight") +  # Receiver consistency
    nodeocov("avg_outgoing_weight") +  # Sender diversity
    #transitiveweights("min", "max", "min") +  # Structural closure
    nonzero,
  response = "weight",
  reference = ~Geometric,
  control = control.ergm(MCMC.samplesize = 10000)
)
```

### ERGM Dynamic

```{r}
library(sna)
library(networkDynamic)

net_dynamic_friend <- networkDynamic(network.list = list(W1, W2, W3))
```

```{r}
library(tergm) 
library(tsna)

stergm_mod1 <- tergm(net_dynamic_friend ~ Form(~ edges) + Persist(~ edges),
                     estimate = "CMLE", times = 0:2)

summary(stergm_mod1)
```

```{r}
stergm_mod3 <- tergm(net_dynamic_friend ~ 
                        Form(~ edges +
                               nodefactor("gender") +
                               edgecov("value") +
                               edgecov("politics") +
                               edgecov("study") +
                               absdiff("age") + 
                               absdiff("leftrightself") + 
                               absdiff("grade") + 
                               nodefactor("partyvote")) +  
                        Persist(~ edges + 
                                  nodefactor("gender") +
                                  edgecov("value") +
                                  edgecov("politics") +
                                  edgecov("study") +
                                  absdiff("age") + 
                                  absdiff("leftrightself") +
                                  absdiff("grade") + 
                                  nodefactor("partyvote")),  
                      estimate = "CMLE", times = 0:2, 
                      control = control.tergm(CMLE.ergm = 
                                           control.ergm(MCMC.burnin = 50000, 
                                                    MCMC.interval = 3000, 
                                                    MCMC.samplesize = 6500)))

summary(stergm_mod3)
```

```{r}
set.seed(107)

stergm_mod4 <- tergm(net_dynamic_friend ~ 
                        Form(~ edges + 
                               nodefactor("gender") +  
                               edgecov("seating") + 
                               gwesp(decay = .5, fixed = T)) + 
                        Persist(~ edges +
                                  nodefactor("gender") +
                                  edgecov("seating")),
                      estimate = "CMLE", times = 0:3, 
                      control = control.tergm(CMLE.ergm = 
                                           control.ergm(MCMC.burnin = 50000, 
                                                    MCMC.interval = 3000, 
                                                    MCMC.samplesize = 6500)))
```
